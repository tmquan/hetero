#include "stencil_3d.hpp"
#include "helper_math.h" 

void stencil_3d(float* deviceSrc, float* deviceDst, int dimx, int dimy, int dimz, int halo, cudaStream_t stream);

__global__ 
void __stencil_3d(float* deviceSrc, float* deviceDst, int dimx, int dimy, int dimz, int halo);

void stencil_3d(float* deviceSrc, float* deviceDst, int dimx, int dimy, int dimz, int halo, cudaStream_t stream)
{
    dim3 blockDim(16, 4, 4);
    dim3 gridDim(
        (dimx/blockDim.x+((dimx%blockDim.x)?1:0)),
        (dimy/blockDim.y+((dimy%blockDim.y)?1:0)),
        (dimz/blockDim.z+((dimz%blockDim.z)?1:0)) );
		// 1); /// Sweep the z dimension, 3D
    size_t sharedMemSize  = (blockDim.x+2*halo)*(blockDim.y+2*halo)*(blockDim.z+2*halo)*sizeof(float);
    __stencil_3d<<<gridDim, blockDim, sharedMemSize, stream>>>
     (deviceSrc, deviceDst, dimx, dimy, dimz, halo);
}

#define at(x, y, z, dimx, dimy, dimz) (clamp ((int)(z), 0, dimz-1)*dimy*dimx+      \
                                       clamp ((int)(y), 0, dimy-1)*dimx+           \
                                       clamp ((int)(x), 0, dimx-1) )                   
__global__ 
void __stencil_3d(float* deviceSrc, float* deviceDst, int dimx, int dimy, int dimz, int halo)
{
    extern __shared__ float sharedMemSrc[];                     										
    int  shared_index_1d, global_index_1d, index_1d;                                      										
    int3 shared_index_3d, global_index_3d, index_3d;                                      										
    // Multi batch reading here                                                           										
    int3 sharedMemDim    = make_int3(blockDim.x+2*halo,                                   										
                                     blockDim.y+2*halo,                                  										
                                     blockDim.z+2*halo);                                  										
    int  sharedMemSize   = sharedMemDim.x*sharedMemDim.y*sharedMemDim.z;                  										
    int3 blockSizeDim    = make_int3(blockDim.x+0*halo,                                   										
                                     blockDim.y+0*halo,                                   										
                                     blockDim.z+0*halo);                                  										
    int  blockSize        = blockSizeDim.x*blockSizeDim.y*blockSizeDim.z;                  									
    int  numBatches       = sharedMemSize/blockSize+((sharedMemSize%blockSize)?1:0);    
	
	index_3d       =  make_int3(blockIdx.x * blockDim.x+threadIdx.x,                    
								blockIdx.y * blockDim.y+threadIdx.y,                    
								blockIdx.z * blockDim.z+threadIdx.z);                   
	index_1d       =  index_3d.z * dimy * dimx+                                         
					  index_3d.y * dimx+                                                
					  index_3d.x;                                                         
																						   
	if ((index_3d.z >= dimz) || (index_3d.y >= dimy) || (index_3d.x > dimx))
		return;
	         
	
	for(int batch=0; batch<numBatches; batch++)                                           										
    {                                                                                     										
        shared_index_1d  =  threadIdx.z * blockDim.y * blockDim.x+                      										
                            threadIdx.y * blockDim.x+                                   										
                            threadIdx.x+                                                										
                            blockSize*batch; //Magic is here quantm@unist.ac.kr           										
        shared_index_3d  =  make_int3((shared_index_1d % ((blockDim.y+2*halo)*(blockDim.x+2*halo))) % (blockDim.x+2*halo),		
                                      (shared_index_1d % ((blockDim.y+2*halo)*(blockDim.x+2*halo))) / (blockDim.x+2*halo),		
                                      (shared_index_1d / ((blockDim.y+2*halo)*(blockDim.x+2*halo))) );      					
        global_index_3d  =  make_int3(blockIdx.x * blockDim.x+shared_index_3d.x-halo,				
                                      blockIdx.y * blockDim.y+shared_index_3d.y-halo, 				
                                      blockIdx.z * blockDim.z+shared_index_3d.z-halo );			
        global_index_1d  =  global_index_3d.z * dimy * dimx+                                   								
                            global_index_3d.y * dimx+                                   										
                            global_index_3d.x;                                            										
        if (shared_index_3d.z < (blockDim.z+2*halo))                                    										
        {                                                                                 										
            if(global_index_3d.z >= 0 && global_index_3d.z < dimz &&                      										
               global_index_3d.y >= 0 && global_index_3d.y < dimy &&                        									
               global_index_3d.x >= 0 && global_index_3d.x < dimx)                        										
            {                                                                             										
                sharedMemSrc[at(shared_index_3d.x, shared_index_3d.y, shared_index_3d.z, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)] = deviceSrc[global_index_1d];                         
            }                                                                             						
            else                                                                          						
            {                                                                             						
                sharedMemSrc[at(shared_index_3d.x, shared_index_3d.y, shared_index_3d.z, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)] = -1;   
			}                                                                             
        }                                                                                 
        __syncthreads();                                                                  
    }                       
	
	// Processing here
	float result = sharedMemSrc[at(threadIdx.x+halo, threadIdx.y+halo, threadIdx.z+halo, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// //float a000 = sharedMemSrc[at(threadIdx.x+halo+0, threadIdx.y+halo+0, threadIdx.z+halo+0, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];

	
	// float a222 = sharedMemSrc[at(threadIdx.x+halo-1, threadIdx.y+halo-1, threadIdx.z+halo-1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a220 = sharedMemSrc[at(threadIdx.x+halo-1, threadIdx.y+halo-1, threadIdx.z+halo+0, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a221 = sharedMemSrc[at(threadIdx.x+halo-1, threadIdx.y+halo-1, threadIdx.z+halo+1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a202 = sharedMemSrc[at(threadIdx.x+halo-1, threadIdx.y+halo+0, threadIdx.z+halo-1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a200 = sharedMemSrc[at(threadIdx.x+halo-1, threadIdx.y+halo+0, threadIdx.z+halo+0, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];	
	// float a201 = sharedMemSrc[at(threadIdx.x+halo-1, threadIdx.y+halo+0, threadIdx.z+halo+1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a212 = sharedMemSrc[at(threadIdx.x+halo-1, threadIdx.y+halo+1, threadIdx.z+halo-1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a210 = sharedMemSrc[at(threadIdx.x+halo-1, threadIdx.y+halo+1, threadIdx.z+halo+0, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a211 = sharedMemSrc[at(threadIdx.x+halo-1, threadIdx.y+halo+1, threadIdx.z+halo+1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	
	// float a022 = sharedMemSrc[at(threadIdx.x+halo+0, threadIdx.y+halo-1, threadIdx.z+halo-1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a020 = sharedMemSrc[at(threadIdx.x+halo+0, threadIdx.y+halo-1, threadIdx.z+halo+0, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a021 = sharedMemSrc[at(threadIdx.x+halo+0, threadIdx.y+halo-1, threadIdx.z+halo+1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a002 = sharedMemSrc[at(threadIdx.x+halo+0, threadIdx.y+halo+0, threadIdx.z+halo-1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a000 = sharedMemSrc[at(threadIdx.x+halo+0, threadIdx.y+halo+0, threadIdx.z+halo+0, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];	
	// float a001 = sharedMemSrc[at(threadIdx.x+halo+0, threadIdx.y+halo+0, threadIdx.z+halo+1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a012 = sharedMemSrc[at(threadIdx.x+halo+0, threadIdx.y+halo+1, threadIdx.z+halo-1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a010 = sharedMemSrc[at(threadIdx.x+halo+0, threadIdx.y+halo+1, threadIdx.z+halo+0, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a011 = sharedMemSrc[at(threadIdx.x+halo+0, threadIdx.y+halo+1, threadIdx.z+halo+1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	
	// float a122 = sharedMemSrc[at(threadIdx.x+halo+1, threadIdx.y+halo-1, threadIdx.z+halo-1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a120 = sharedMemSrc[at(threadIdx.x+halo+1, threadIdx.y+halo-1, threadIdx.z+halo+0, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a121 = sharedMemSrc[at(threadIdx.x+halo+1, threadIdx.y+halo-1, threadIdx.z+halo+1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a102 = sharedMemSrc[at(threadIdx.x+halo+1, threadIdx.y+halo+0, threadIdx.z+halo-1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a100 = sharedMemSrc[at(threadIdx.x+halo+1, threadIdx.y+halo+0, threadIdx.z+halo+0, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];	
	// float a101 = sharedMemSrc[at(threadIdx.x+halo+1, threadIdx.y+halo+0, threadIdx.z+halo+1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a112 = sharedMemSrc[at(threadIdx.x+halo+1, threadIdx.y+halo+1, threadIdx.z+halo-1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a110 = sharedMemSrc[at(threadIdx.x+halo+1, threadIdx.y+halo+1, threadIdx.z+halo+0, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	// float a111 = sharedMemSrc[at(threadIdx.x+halo+1, threadIdx.y+halo+1, threadIdx.z+halo+1, sharedMemDim.x, sharedMemDim.y, sharedMemDim.z)];
	
	// float param0, param1, param2, param3;
	// result = param0 *  a000 +
	         // param1 * (a200+a100+a020+a010+a002+a001) +
			 // param2 * (a220+a210+a120+a110+a202+a201+a102+a101+a022+a021+a012+a011) +
			 // param3 * (a222+a221+a212+a211+a122+a121+a112+a111) ;
	// Single pass writing here                                                                 
	deviceDst[index_1d] = result;                                        
}                                                                                         
